<template>
	<div class="parallax-wrapper" ref="block">
		<div
			:class="['is-parallax', fixed ? 'is-fixed': '']"
			ref="parallax"
		>
			<slot/>
		</div>
	</div>
</template>

<script>
export default {
	name: 'Parallax',
	props: {
		speedFactor: {
			default: 0.15,
			type: Number
		},
		fixed: {
			default: false,
			type: Boolean
		}
	},

	mounted() {
		if (!this.fixed) {
			window.addEventListener('scroll', this.scrollHandler, false)
		}
	},

	methods: {
		animateElement() {
			const parentHeight = this.$refs.block.offsetHeight
			const parallaxHeight = this.$refs.parallax.offsetHeight
			const availableOffset = parallaxHeight - parentHeight
			console.log(parentHeight, parallaxHeight)
			let animationValue = (window.pageYOffset * this.speedFactor)

			if (animationValue <= availableOffset && animationValue >= 0) {
				this.$refs.parallax.style.transform = `translateY(${-animationValue}px)`
			}
		},

		isInView(el) {
			let rect = el.getBoundingClientRect()

			return (
				rect.bottom >= 0 &&
				rect.top <= (window.innerHeight || document.documentElement.clientHeight)
			)
		},

		scrollHandler() {
			window.requestAnimationFrame(() => {
				if (this.isInView(this.$refs.parallax)) {
					this.animateElement()
				}
			})
		}
	},

	beforeUnmount() {
		window.removeEventListener('scroll', this.scrollHandler, false)
	}
}
</script>

<style lang="scss">
.parallax-wrapper {
	position: absolute;
	height: 70vh;
	min-height: 20vh;
	scroll-behavior: smooth;
	overflow: hidden;
	z-index: -1;

	@media (min-width: 768px) {
		min-height: 100vh;
	}

	.is-parallax {
		width: 100%;
		overflow: hidden;

		position: absolute;
		top: 0;
		left: 0;
		right: 0;

		will-change: transform;

		> * {
			height: 100%;
			max-width: none;
			width: 100%;
			object-fit: cover;
			object-position: top;
		}

		&.is-fixed {
			position: fixed;

			> * {
				height: 100vh;
				max-width: none;
			}
		}
	}
}
</style>
